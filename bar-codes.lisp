;;; cl-pdf copyright 2002-2003 Marc Battyani see license.txt for the details
;;; You can reach me at marc.battyani@fractalconcept.com or marc@battyani.net
;;; The homepage of cl-pdf is here: http://www.fractalconcept.com/asp/html/cl-pdf.html

;; code 128 barcode.
;; Original code by Lars Rustemeier

(in-package pdf)

(defconstant +code128-a+ 103)
(defconstant +code128-b+ 104)
(defconstant +code128-end+ 106)

(defparameter *code128-chars-table* 
  ;;char value line-pattern
  '((#\Space 0 (1 1 nil 1 1 nil nil 1 1 nil nil))
    (#\! 1 (1 1 nil nil 1 1 nil 1 1 nil nil))
    (#\" 2 (1 1 nil nil 1 1 nil nil 1 1 nil))
    (#\# 3 (1 nil nil 1 nil nil 1 1 nil nil nil))
    (#\$ 4 (1 nil nil 1 nil nil nil 1 1 nil nil))
    (#\% 5 (1 nil nil nil 1 nil nil 1 1 nil nil))
    (#\& 6 (1 nil nil 1 1 nil nil 1 nil nil nil))
    (#\' 7 (1 nil nil 1 1 nil nil nil 1 nil nil))
    (#\( 8 (1 nil nil nil 1 1 nil nil 1 nil nil))
    (#\) 9 (1 1 nil nil 1 nil nil 1 nil nil nil))
    (#\* 10 (1 1 nil nil 1 nil nil nil 1 nil nil))
    (#\+ 11 (1 1 nil nil nil 1 nil nil 1 nil nil))
    (#\, 12 (1 nil 1 1 nil nil 1 1 1 nil nil))
    (#\- 13 (1 nil nil 1 1 nil 1 1 1 nil nil))
    (#\. 14 (1 nil nil 1 1 nil nil 1 1 1 nil))
    (#\/ 15 (1 nil 1 1 1 nil nil 1 1 nil nil))
    (#\0 16 (1 nil nil 1 1 1 nil 1 1 nil nil))
    (#\1 17 (1 nil nil 1 1 1 nil nil 1 1 nil))
    (#\2 18 (1 1 nil nil 1 1 1 nil nil 1 nil))
    (#\3 19 (1 1 nil nil 1 nil 1 1 1 nil nil))
    (#\4 20 (1 1 nil nil 1 nil nil 1 1 1 nil))
    (#\5 21 (1 1 nil 1 1 1 nil nil 1 nil nil))
    (#\6 22 (1 1 nil nil 1 1 1 nil 1 nil nil))
    (#\7 23 (1 1 1 nil 1 1 nil 1 1 1 nil))
    (#\8 24 (1 1 1 nil 1 nil nil 1 1 nil nil))
    (#\9 25 (1 1 1 nil nil 1 nil 1 1 nil nil))
    (#\: 26 (1 1 1 nil nil 1 nil nil 1 1 nil))
    (#\; 27 (1 1 1 nil 1 1 nil nil 1 nil nil))
    (#\< 28 (1 1 1 nil nil 1 1 nil 1 nil nil))
    (#\= 29 (1 1 1 nil nil 1 1 nil nil 1 nil))
    (#\> 30 (1 1 nil 1 1 nil 1 1 nil nil nil))
    (#\? 31 (1 1 nil 1 1 nil nil nil 1 1 nil))
    (#\@ 32 (1 1 nil nil nil 1 1 nil 1 1 nil))
    (#\A 33 (1 nil 1 nil nil nil 1 1 nil nil nil))
    (#\B 34 (1 nil nil nil 1 nil 1 1 nil nil nil))
    (#\C 35 (1 nil nil nil 1 nil nil nil 1 1 nil))
    (#\D 36 (1 nil 1 1 nil nil nil 1 nil nil nil))
    (#\E 37 (1 nil nil nil 1 1 nil 1 nil nil nil))
    (#\F 38 (1 nil nil nil 1 1 nil nil nil 1 nil))
    (#\G 39 (1 1 nil 1 nil nil nil 1 nil nil nil))
    (#\H 40 (1 1 nil nil nil 1 nil 1 nil nil nil))
    (#\I 41 (1 1 nil nil nil 1 nil nil nil 1 nil))
    (#\J 42 (1 nil 1 1 nil 1 1 1 nil nil nil))
    (#\K 43 (1 nil 1 1 nil nil nil 1 1 1 nil))
    (#\L 44 (1 nil nil nil 1 1 nil 1 1 1 nil))
    (#\M 45 (1 nil 1 1 1 nil 1 1 nil nil nil))
    (#\N 46 (1 nil 1 1 1 nil nil nil 1 1 nil))
    (#\O 47 (1 nil nil nil 1 1 1 nil 1 1 nil))
    (#\P 48 (1 1 1 nil 1 1 1 nil 1 1 nil))
    (#\Q 49 (1 1 nil 1 nil nil nil 1 1 1 nil))
    (#\R 50 (1 1 nil nil nil 1 nil 1 1 1 nil))
    (#\S 51 (1 1 nil 1 1 1 nil 1 nil nil nil))
    (#\T 52 (1 1 nil 1 1 1 nil nil nil 1 nil))
    (#\U 53 (1 1 nil 1 1 1 nil 1 1 1 nil))
    (#\V 54 (1 1 1 nil 1 nil 1 1 nil nil nil))
    (#\W 55 (1 1 1 nil 1 nil nil nil 1 1 nil))
    (#\X 56 (1 1 1 nil nil nil 1 nil 1 1 nil))
    (#\Y 57 (1 1 1 nil 1 1 nil 1 nil nil nil))
    (#\Z 58 (1 1 1 nil 1 1 nil nil nil 1 nil))
    (#\[ 59 (1 1 1 nil nil nil 1 1 nil 1 nil))
    (#\\ 60 (1 1 1 nil 1 1 1 1 nil 1 nil))
    (#\] 61 (1 1 nil nil 1 nil nil nil nil 1 nil))
    (#\^ 62 (1 1 1 1 nil nil nil 1 nil 1 nil))
    (#\_ 63 (1 nil 1 nil nil 1 1 nil nil nil nil))
    (#\' 64 (1 nil 1 nil nil nil nil 1 1 nil nil))
    (#\a 65 (1 nil nil 1 nil 1 1 nil nil nil nil))
    (#\b 66 (1 nil nil 1 nil nil nil nil 1 1 nil))
    (#\c 67 (1 nil nil nil nil 1 nil 1 1 nil nil))
    (#\d 68 (1 nil nil nil nil 1 nil nil 1 1 nil))
    (#\e 69 (1 nil 1 1 nil nil 1 nil nil nil nil))
    (#\f 70 (1 nil 1 1 nil nil nil nil 1 nil nil))
    (#\g 71 (1 nil nil 1 1 nil 1 nil nil nil nil))
    (#\h 72 (1 nil nil 1 1 nil nil nil nil 1 nil))
    (#\i 73 (1 nil nil nil nil 1 1 nil 1 nil nil))
    (#\j 74 (1 nil nil nil nil 1 1 nil nil 1 nil))
    (#\k 75 (1 1 nil nil nil nil 1 nil nil 1 nil))
    (#\l 76 (1 1 nil nil 1 nil 1 nil nil nil nil))
    (#\m 77 (1 1 1 1 nil 1 1 1 nil 1 nil))
    (#\n 78 (1 1 nil nil nil nil 1 nil 1 nil nil))
    (#\o 79 (1 nil nil nil 1 1 1 1 nil 1 nil))
    (#\p 80 (1 nil 1 nil nil 1 1 1 1 nil nil))
    (#\q 81 (1 nil nil 1 nil 1 1 1 1 nil nil))
    (#\r 82 (1 nil nil 1 nil nil 1 1 1 1 nil))
    (#\s 83 (1 nil 1 1 1 1 nil nil 1 nil nil))
    (#\t 84 (1 nil nil 1 1 1 1 nil 1 nil nil))
    (#\u 85 (1 nil nil 1 1 1 1 nil nil 1 nil))
    (#\v 86 (1 1 1 1 nil 1 nil nil 1 nil nil))
    (#\w 87 (1 1 1 1 nil nil 1 nil 1 nil nil))
    (#\x 88 (1 1 1 1 nil nil 1 nil nil 1 nil))
    (#\y 89 (1 1 nil 1 1 nil 1 1 1 1 nil))
    (#\z 90 (1 1 nil 1 1 1 1 nil 1 1 nil))
    (#\{ 91 (1 1 1 1 nil 1 1 nil 1 1 nil))
    (#\| 92 (1 nil 1 nil 1 1 1 1 nil nil nil))
    (#\} 93 (1 nil 1 nil nil nil 1 1 1 1 nil))
    (#\~ 94 (1 nil nil nil 1 nil 1 1 1 1 nil))
    (T 95 (1 nil 1 1 1 1 nil 1 nil nil nil))
    (T 96 (1 nil 1 1 1 1 nil nil nil 1 nil))
    (T 97 (1 1 1 1 nil 1 nil 1 nil nil nil))
    (T 98 (1 1 1 1 nil 1 nil nil nil 1 nil))
    (T 99 (1 nil 1 1 1 nil 1 1 1 1 nil))
    (T 100 (1 nil 1 1 1 1 nil 1 1 1 nil))
    (T 101 (1 1 1 nil 1 nil 1 1 1 1 nil))
    (T 102 (1 1 1 1 nil 1 nil 1 1 1 nil))
    (T 103 (1 1 nil 1 nil nil nil nil 1 nil nil))
    (T 104 (1 1 nil 1 nil nil 1 nil nil nil nil))
    (T 105 (1 1 nil 1 nil nil 1 1 1 nil nil))
    (T 106 (1 1 nil nil nil 1 1 1 nil 1 nil 1 1))))

(defparameter *code128-by-code* (map 'vector #'third *code128-chars-table*))

(defparameter *code128-by-char* (make-hash-table))

(loop for (char code bars) in *code128-chars-table*
      do (setf (gethash char *code128-by-char*) (cons code bars)))

(defun char-to-bars (char)
  (gethash char *code128-by-char*))

(defun code-to-bars (code)
  (aref *code128-by-code* code))

(defun stroke-bar (line-height line-width black)
  (translate line-width 0)
  (when black
    (move-to 0 0)
    (line-to 0 (- line-height))
    (stroke)))

(defun draw-bars (bars line-height line-width &optional start-stop-factor)
  (when start-stop-factor
    (incf line-height (* line-height start-stop-factor)))
  (dolist (bar-or-space bars)
    (stroke-bar line-height line-width bar-or-space)))

(defun draw-char (char line-height line-width font font-size)
  (with-saved-state
      (translate 0 (- (+ font-size line-height)))
    (in-text-mode
     (set-font font font-size)
     (show-char char)))
  (destructuring-bind (code . bars) (char-to-bars char)
    (draw-bars bars line-height line-width)
    code))

(defun draw-bar-code128 (string x y &key (font (get-font)) (font-size 5)(start-stop-factor 0.3)
				(line-height 17)(line-width 0.5))
  (with-saved-state
      (translate x y)
    (set-line-width line-width)
    (draw-bars (code-to-bars +code128-b+) line-height line-width start-stop-factor)
    (loop with checksum = +code128-b+
	  for pos from 1
	  for char across string
	  do (incf checksum
		   (* pos (draw-char char line-height line-width font font-size)))
	  finally (draw-bars (code-to-bars (mod checksum 103)) line-height line-width))
    (draw-bars (code-to-bars +code128-end+) line-height line-width start-stop-factor)))

